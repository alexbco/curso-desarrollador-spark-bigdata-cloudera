# ============================================
# üß† CHULETARIO DE TUPLAS EN PYTHON üß©
# ============================================

print("=== üß© CHULETARIO DE TUPLAS EN PYTHON ===\n")

# 1Ô∏è‚É£ Qu√© es una tupla
mi_tupla = (1, 2, 3)
print("Tupla b√°sica:", mi_tupla)

# Pueden contener diferentes tipos
mix = (1, "Alex", 3.14, True)
print("Tupla mixta:", mix, "\n")

# 2Ô∏è‚É£ Crear tuplas
vacia = ()
una_sola = (5,)
sin_parentesis = 1, 2, 3
print("Tupla vac√≠a:", vacia)
print("Tupla con un solo elemento:", una_sola)
print("Tupla sin par√©ntesis:", sin_parentesis, "\n")

# 3Ô∏è‚É£ Acceder a elementos
t = (10, 20, 30, 40)
print("Primer elemento:", t[0])
print("√öltimo elemento:", t[-1], "\n")

# 4Ô∏è‚É£ Recorrer una tupla
print("Recorriendo la tupla:")
for x in t:
    print("-", x)
print()

# 5Ô∏è‚É£ Desempaquetar valores
persona = ("Alex", 22, "Espa√±a")
nombre, edad, pais = persona
print(f"Nombre: {nombre}, Edad: {edad}, Pa√≠s: {pais}")

# Ignorar un valor con _
nombre, _, pais = persona
print("Desempaquetando ignorando edad:", nombre, pais, "\n")

# 6Ô∏è‚É£ Concatenar y multiplicar
a = (1, 2)
b = (3, 4)
print("Concatenar:", a + b)
print("Multiplicar:", a * 3, "\n")

# 7Ô∏è‚É£ Funciones √∫tiles
nums = (1, 2, 2, 3, 5, 3)
print("len(nums):", len(nums))
print("sum(nums):", sum(nums))
print("max(nums):", max(nums))
print("min(nums):", min(nums))
print("¬øEst√° el 2?:", 2 in nums)
print("count(2):", nums.count(2))
print("index(3):", nums.index(3), "\n")

# 8Ô∏è‚É£ Conversi√≥n entre lista y tupla
lista = list(nums)
print("Tupla convertida en lista:", lista)
lista.append(10)
nueva_tupla = tuple(lista)
print("Lista vuelta a tupla:", nueva_tupla, "\n")

# 9Ô∏è‚É£ Tuplas anidadas
anidada = (("Alex", 22), ("Juan", 25))
print("Tupla anidada:", anidada)
print("Primer nombre:", anidada[0][0], "\n")

# üîü Usos t√≠picos
# Datos fijos
coordenadas = (40.5, -3.7)
print("Coordenadas:", coordenadas)

# Claves de diccionario (porque son inmutables)
puntos = {(0, 0): "Inicio", (1, 2): "Destino"}
print("Diccionario con claves tipo tupla:", puntos)

# Retornar varios valores desde una funci√≥n
def datos_usuario():
    return ("Alex", 22, "Guadalajara")

nombre, edad, ciudad = datos_usuario()
print(f"Datos usuario ‚Üí Nombre: {nombre}, Edad: {edad}, Ciudad: {ciudad}\n")

# 11Ô∏è‚É£ Diferencias con listas
print("Diferencias entre lista y tupla:")
print("""
| Caracter√≠stica | Lista [] | Tupla () |
|----------------|-----------|-----------|
| Mutable        | S√≠ ‚úÖ     | No ‚ùå     |
| Velocidad      | M√°s lenta | M√°s r√°pida |
| Uso com√∫n      | Datos que cambian | Datos fijos |
""")

# 12Ô∏è‚É£ Ejemplos pr√°cticos
frutas = ("manzanas", "peras", "fresas")
print("Tupla de frutas:", frutas)
print("Segunda fruta:", frutas[1])

if "fresas" in frutas:
    print("S√≠, hay fresas üçì")

# Desempaquetar
a, b, c = frutas
print("Desempaquetado:", a, b, c)

# Concatenar
nueva = frutas + ("pl√°tanos",)
print("Concatenada:", nueva)

# Contar
print("N√∫mero de peras:", nueva.count("peras"))

# Convertir a lista y volver a tupla
lista_frutas = list(nueva)
lista_frutas.append("kiwis")
print("Lista:", lista_frutas)
print("De vuelta a tupla:", tuple(lista_frutas), "\n")

# ‚ö° Extra: tupla de un solo elemento
t1 = (5)
t2 = (5,)
print("t1 =", t1, "‚Üí tipo:", type(t1))
print("t2 =", t2, "‚Üí tipo:", type(t2), "\n")

# üßæ Resumen visual final
print("Resumen r√°pido de tuplas en Python:")
print("""
- Se crean con () ‚Üí t = (1, 2, 3)
- Inmutables ‚Üí no se pueden modificar
- Acceso por √≠ndices
- Se pueden recorrer con for
- Soportan len(), sum(), max(), min(), count(), index()
- Puedes convertirlas a lista con list()
- Pueden usarse como claves en diccionarios
- Desempaquetado r√°pido: a, b, c = (1, 2, 3)
- Una sola tupla ‚Üí (5,) (con coma!)
""")

print("=== FIN DEL CHULETARIO DE TUPLAS üß† ===")
1